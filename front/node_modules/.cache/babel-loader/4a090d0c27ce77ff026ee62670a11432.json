{"ast":null,"code":"var _s = $RefreshSig$();\n\n//attaches axios interceptors to req + res axios instances\nimport { axiosPrivate } from \"../api/axios\";\nimport { useEffect } from \"react\";\nimport useRefreshToken from \"./useRefreshToken\";\nimport useAuth from \"./useAuth\";\n\nconst useAxiosPrivate = () => {\n  _s();\n\n  const refresh = useRefreshToken();\n  const {\n    auth\n  } = useAuth();\n  useEffect(() => {\n    const requestIntercept = axiosPrivate.interceptors.request.use(config => {\n      if (!config.headers['Authorization']) {\n        //if this doesn't exist, we know not a retry (therefore first attempt)\n        config.headers['Authorization'] = `Bearer ${auth === null || auth === void 0 ? void 0 : auth.accessToken}`;\n      } // if header already exists, we know it was after the retry (403 error request)\n\n\n      return config;\n    }, err => Promise.reject(err));\n    const responseIntercept = axiosPrivate.interceptors.response.use(response => response, //if response is good, just return response\n    async err => {\n      var _err$response;\n\n      //otherwise (e.g if access token expires)\n      const prevRequest = err === null || err === void 0 ? void 0 : err.config;\n\n      if ((err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 403 && !(prevRequest !== null && prevRequest !== void 0 && prevRequest.sent)) {\n        //403 means if expired access token, !prevRequest?.sent is for checking if wasn't sent so not in endless 403 loop (only want to retry once) \n        prevRequest.sent = true;\n        const newAccessToken = await refresh();\n        prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n        return axiosPrivate(prevRequest); //have updated request w/ new token, then making request again\n      }\n\n      return Promise.reject(err);\n    });\n    return () => {\n      //prevent from piling up over time\n      axiosPrivate.interceptors.request.eject(requestIntercept);\n      axiosPrivate.interceptors.response.eject(responseIntercept);\n    };\n  }, [auth, refresh]);\n  return axiosPrivate;\n};\n\n_s(useAxiosPrivate, \"q/eytZvTHb01ruD3wcQE5kUoGo0=\", false, function () {\n  return [useRefreshToken, useAuth];\n});\n\nexport default useAxiosPrivate;","map":{"version":3,"names":["axiosPrivate","useEffect","useRefreshToken","useAuth","useAxiosPrivate","refresh","auth","requestIntercept","interceptors","request","use","config","headers","accessToken","err","Promise","reject","responseIntercept","response","prevRequest","status","sent","newAccessToken","eject"],"sources":["/home/ethanh/Desktop/1.1_socket-squares-project/v1/src/hooks/useAxiosPrivate.js"],"sourcesContent":["//attaches axios interceptors to req + res axios instances\n\nimport { axiosPrivate } from \"../api/axios\";\nimport { useEffect } from \"react\";\nimport useRefreshToken from \"./useRefreshToken\";\nimport useAuth from \"./useAuth\";\n\nconst useAxiosPrivate = () =>{\n    const refresh = useRefreshToken();\n    const {auth} = useAuth();\n\n    useEffect(() => {\n\n        const requestIntercept = axiosPrivate.interceptors.request.use(\n            config =>{\n                if (!config.headers['Authorization']){ //if this doesn't exist, we know not a retry (therefore first attempt)\n                    config.headers['Authorization'] = `Bearer ${auth?.accessToken}`;\n                }\n                // if header already exists, we know it was after the retry (403 error request)\n                return config;\n            }, (err) => Promise.reject(err)\n        );\n\n        const responseIntercept = axiosPrivate.interceptors.response.use(\n            (response) => response, //if response is good, just return response\n            async(err) =>{ //otherwise (e.g if access token expires)\n                const prevRequest = err?.config;\n                if(err?.response?.status === 403 && !prevRequest?.sent){ //403 means if expired access token, !prevRequest?.sent is for checking if wasn't sent so not in endless 403 loop (only want to retry once) \n                    prevRequest.sent = true;\n                    const newAccessToken = await refresh();\n                    prevRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;\n                    return axiosPrivate(prevRequest); //have updated request w/ new token, then making request again\n                }\n                return Promise.reject(err);\n            }\n        );\n\n        return ()=>{ //prevent from piling up over time\n            axiosPrivate.interceptors.request.eject(requestIntercept);\n            axiosPrivate.interceptors.response.eject(responseIntercept);\n        }\n    },[auth, refresh])\n\n    return axiosPrivate;\n}\n\nexport default useAxiosPrivate;"],"mappings":";;AAAA;AAEA,SAASA,YAAT,QAA6B,cAA7B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,eAAe,GAAG,MAAK;EAAA;;EACzB,MAAMC,OAAO,GAAGH,eAAe,EAA/B;EACA,MAAM;IAACI;EAAD,IAASH,OAAO,EAAtB;EAEAF,SAAS,CAAC,MAAM;IAEZ,MAAMM,gBAAgB,GAAGP,YAAY,CAACQ,YAAb,CAA0BC,OAA1B,CAAkCC,GAAlC,CACrBC,MAAM,IAAG;MACL,IAAI,CAACA,MAAM,CAACC,OAAP,CAAe,eAAf,CAAL,EAAqC;QAAE;QACnCD,MAAM,CAACC,OAAP,CAAe,eAAf,IAAmC,UAASN,IAAV,aAAUA,IAAV,uBAAUA,IAAI,CAAEO,WAAY,EAA9D;MACH,CAHI,CAIL;;;MACA,OAAOF,MAAP;IACH,CAPoB,EAOjBG,GAAD,IAASC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAPS,CAAzB;IAUA,MAAMG,iBAAiB,GAAGjB,YAAY,CAACQ,YAAb,CAA0BU,QAA1B,CAAmCR,GAAnC,CACrBQ,QAAD,IAAcA,QADQ,EACE;IACxB,MAAMJ,GAAN,IAAa;MAAA;;MAAE;MACX,MAAMK,WAAW,GAAGL,GAAH,aAAGA,GAAH,uBAAGA,GAAG,CAAEH,MAAzB;;MACA,IAAG,CAAAG,GAAG,SAAH,IAAAA,GAAG,WAAH,6BAAAA,GAAG,CAAEI,QAAL,gEAAeE,MAAf,MAA0B,GAA1B,IAAiC,EAACD,WAAD,aAACA,WAAD,eAACA,WAAW,CAAEE,IAAd,CAApC,EAAuD;QAAE;QACrDF,WAAW,CAACE,IAAZ,GAAmB,IAAnB;QACA,MAAMC,cAAc,GAAG,MAAMjB,OAAO,EAApC;QACAc,WAAW,CAACP,OAAZ,CAAoB,eAApB,IAAwC,UAASU,cAAe,EAAhE;QACA,OAAOtB,YAAY,CAACmB,WAAD,CAAnB,CAJmD,CAIjB;MACrC;;MACD,OAAOJ,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAP;IACH,CAXqB,CAA1B;IAcA,OAAO,MAAI;MAAE;MACTd,YAAY,CAACQ,YAAb,CAA0BC,OAA1B,CAAkCc,KAAlC,CAAwChB,gBAAxC;MACAP,YAAY,CAACQ,YAAb,CAA0BU,QAA1B,CAAmCK,KAAnC,CAAyCN,iBAAzC;IACH,CAHD;EAIH,CA9BQ,EA8BP,CAACX,IAAD,EAAOD,OAAP,CA9BO,CAAT;EAgCA,OAAOL,YAAP;AACH,CArCD;;GAAMI,e;UACcF,e,EACDC,O;;;AAqCnB,eAAeC,eAAf"},"metadata":{},"sourceType":"module"}